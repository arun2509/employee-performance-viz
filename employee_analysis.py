"""
Employee Performance Analysis & Visualization (Interactive)
-----------------------------------------------------------
- Loads employee data from CSV (or generates synthetic dataset).
- Computes frequency count for "Operations" department and prints it.
- Creates an interactive histogram of performance scores using Plotly.
- Saves an HTML file embedding the plot and the full Python code.

Author: Generated by ChatGPT for 22f2000757@ds.study.iitm.ac.in
Updated: 2025-08-20
"""
import os
import random
import pandas as pd
import plotly.express as px

CSV_PATH = "employee_data.csv"
HTML_PATH = "employee_visualization.html"

def ensure_data(csv_path: str) -> None:
    """Create synthetic dataset if CSV does not exist."""
    if os.path.exists(csv_path):
        return
    departments = ["Marketing", "IT", "Sales", "R&D", "Operations", "Finance", "HR", "Customer Support"]
    dept_weights = [0.12, 0.12, 0.18, 0.10, 0.18, 0.10, 0.10, 0.10]
    regions = ["Latin America", "Africa", "North America", "Asia Pacific", "Europe", "Middle East"]

    rows = []
    random.seed(42)
    for i in range(1, 101):
        emp_id = f"EMP{i:03d}"
        dept = random.choices(departments, weights=dept_weights, k=1)[0]
        region = random.choice(regions)
        performance_score = round(random.uniform(60, 98), 2)
        years_experience = random.randint(0, 25)
        satisfaction_rating = round(random.uniform(2.5, 5.0), 1)
        rows.append({
            "employee_id": emp_id,
            "department": dept,
            "region": region,
            "performance_score": performance_score,
            "years_experience": years_experience,
            "satisfaction_rating": satisfaction_rating
        })
    pd.DataFrame(rows).to_csv(csv_path, index=False)

def main() -> None:
    ensure_data(CSV_PATH)
    df = pd.read_csv(CSV_PATH)

    # Frequency count for "Operations"
    operations_count = (df["department"] == "Operations").sum()
    print(f'Frequency count for "Operations" department: {operations_count}')

    # Plotly histogram
    fig = px.histogram(
        df,
        x="performance_score",
        nbins=10,
        title="Employee Performance Distribution",
        labels={"performance_score": "Performance Score"}
    )

    # Read this Python code
    code_block = ""
    try:
        with open(__file__, "r", encoding="utf-8") as f:
            code_block = f.read()
    except Exception:
        code_block = "# Could not read source code."

    # Save HTML file
    with open(HTML_PATH, "w", encoding="utf-8") as f:
        f.write("<html><head><title>Employee Visualization</title></head><body>")
        f.write("<h1>Employee Performance Visualization</h1>")
        f.write('<p class="meta">Generated by ChatGPT for <strong>22f2000757@ds.study.iitm.ac.in</strong></p>')
        f.write(f'<p><b>Frequency count for "Operations":</b> {operations_count}</p>')
        f.write("<h2>Interactive Histogram</h2>")
        f.write(fig.to_html(full_html=False, include_plotlyjs="cdn"))
        f.write("<h2>Python Code</h2>")
        f.write("<pre><code>")
        f.write(code_block)
        f.write("</code></pre>")
        f.write("</body></html>")

if __name__ == "__main__":
    main()
