"""
Employee Performance Analysis & Visualization
---------------------------------------------
- Loads employee data from CSV.
- Computes frequency count for "Operations" department and prints it.
- Creates a bar chart of departments using matplotlib.
- Saves an HTML file embedding the plot and this code.

If "employee_data.csv" does not exist, a synthetic dataset of 100 employees is generated.

Author: Generated by ChatGPT for 22f2000757@ds.study.iitm.ac.in
Created: 2025-08-20 05:25:13
"""
import os
import io
import base64
import pandas as pd
import matplotlib.pyplot as plt

CSV_PATH = "employee_data.csv"
HTML_PATH = "employee_visualization.html"

def ensure_data(csv_path: str) -> None:
    if os.path.exists(csv_path):
        return
    import random
    random.seed(42)
    departments = ["Marketing", "IT", "Sales", "R&D", "Operations", "Finance", "HR", "Customer Support"]
    dept_weights = [0.12, 0.12, 0.18, 0.10, 0.18, 0.10, 0.10, 0.10]
    regions = ["Latin America", "Africa", "North America", "Asia Pacific", "Europe", "Middle East"]
    rows = []
    for i in range(1, 101):
        emp_id = f"EMP{i:03d}"
        dept = random.choices(departments, weights=dept_weights, k=1)[0]
        region = random.choice(regions)
        performance_score = round(random.uniform(60, 98), 2)
        years_experience = random.randint(0, 25)
        satisfaction_rating = round(random.uniform(2.5, 5.0), 1)
        rows.append({
            "employee_id": emp_id,
            "department": dept,
            "region": region,
            "performance_score": performance_score,
            "years_experience": years_experience,
            "satisfaction_rating": satisfaction_rating
        })
    pd.DataFrame(rows).to_csv(csv_path, index=False)

def main() -> None:
    ensure_data(CSV_PATH)
    df = pd.read_csv(CSV_PATH)

    # Frequency count for "Operations"
    operations_count = (df["department"] == "Operations").sum()
    print(f'Frequency count for "Operations" department: {operations_count}')

    # Department distribution
    dept_counts = df["department"].value_counts().sort_index()

    plt.figure()
    dept_counts.plot(kind="bar")
    plt.title("Department Distribution (Count of Employees)")
    plt.xlabel("Department")
    plt.ylabel("Count of Employees")
    plt.tight_layout()

    # Save figure to embedded PNG
    buf = io.BytesIO()
    plt.savefig(buf, format="png", dpi=120, bbox_inches="tight")
    buf.seek(0)
    img_b64 = base64.b64encode(buf.read()).decode("utf-8")
    plt.close()

    # Build simple HTML with the image and code
    code_block = open(__file__, "r", encoding="utf-8").read() if os.path.exists(__file__) else ""
    html = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <title>Employee Visualization</title>
      <style>
        body { font-family: Arial, sans-serif; max-width: 900px; margin: 2rem auto; padding: 0 1rem; }
        h1, h2 { margin: 0.5rem 0; }
        .meta { color: #555; font-size: 0.95rem; }
        .figure { text-align: center; margin: 1.5rem 0; }
        pre { background: #f6f8fa; padding: 1rem; overflow-x: auto; border-radius: 8px; }
        code { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; font-size: 13px; }
        .count { font-weight: bold; }
      </style>
    </head>
    <body>
      <h1>Employee Department Distribution</h1>
      <p class="meta">Generated by ChatGPT for <strong>22f2000757@ds.study.iitm.ac.in</strong></p>
      <p>This page shows the count of employees per department and prints the frequency of the "Operations" department to the console when run as a script.</p>
      <p class="count">Frequency count for "Operations": {operations_count}</p>
      <div class="figure">
        <img alt="Department Distribution" src="data:image/png;base64,{img_b64}" />
      </div>
      <h2>Python Code</h2>
      <pre><code>{code_block}</code></pre>
    </body>
    </html>
    """
    with open(HTML_PATH, "w", encoding="utf-8") as f:
        f.write(html)

if __name__ == "__main__":
    main()
